{"version":3,"sources":["pages/Home/index.js","utils/validators.js","utils/masks.js","components/CustomInputs/index.js","pages/PaginaUm/index.js","pages/NotFound/index.js","Router.js","serviceWorker.js","index.js"],"names":["console","log","process","Home","className","Component","validateEmail","value","error","test","validatePhone","replace","length","validateCep","validateDate","date","Date","substr","isNaN","phoneMask","cepMask","dateMask","PhoneInput","props","type","mask","CepInput","DateInput","PaginaUm","initialValues","email","phone","cep","onSubmit","values","errors","touched","dirty","isValid","isValidating","isSubmitting","name","validate","as","placeholder","disabled","NotFound","Router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.08e9a246.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './index.sass'\n\nconsole.log(`API KEY ${process.env.NODE_ENV} =>`, process.env[`REACT_APP_API_KEY_${process.env.NODE_ENV}`])\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"home\">\n        <h1 className=\"home__title primary-color\"> Title H1 </h1>\n        <h2 className=\"home__title secondary-color\"> Title H2 </h2>\n        <h3 className=\"home__title accent-color\"> Title H3 </h3>\n        <h4 className=\"home__title highlight-color\"> Title H4 </h4>\n        <h5 className=\"home__title black background-light\"> Title H5 </h5>\n        <h6 className=\"home__title white background-black\"> Title H6 </h6>\n      </div>\n    );\n  }\n}\nexport default Home;","export const validateEmail = ( value ) => {\n  let error;\n\n  if ( !value ) {\n    error = 'Campo obrigatório'\n  } else if ( !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test( value ) ) {\n    error = 'E-mail inválido'\n  }\n\n  return error;\n}\n\nexport const validatePhone = ( value ) => {\n  let error;\n\n  if ( !value ) {\n    error = 'Campo obrigatório'\n  } else if ( (value.replace(/\\D/g,'') ).length !== 11 ) {\n    error = 'Telefone inválido'\n  }\n\n  return error;\n}\n\nexport const validateCep = ( value ) => {\n  let error;\n\n  if ( !value ) {\n    error = 'Campo obrigatório'\n  } else if ( (value.replace(/\\D/g,'') ).length !== 8 ) {\n    error = 'CEP inválido'\n  }\n\n  return error;\n}\n\nexport const validateDate = ( value ) => {\n  let error\n  let date = new Date( value.substr(3, 2) + \"-\" + value.substr(0, 2) + \"-\" + value.substr(6, 4) )\n\n  if ( !value ) {\n    error = 'Campo obrigatório';\n  } else if ( value.length !== 10 ) {\n    error = 'Data inválida'\n  } else if ( !(date instanceof Date && !isNaN( date )) ) {\n    error = 'Data inválida'\n  }\n\n  return error;\n}","export const phoneMask = [\n  \"(\",\n  /\\d/,\n  /\\d/,\n  \")\",\n  \" \",\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  \"-\",\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/\n];\n\nexport const cepMask = [\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  \"-\",\n  /\\d/,\n  /\\d/,\n  /\\d/\n];\n\nexport const dateMask = [\n  /\\d/,\n  /\\d/,\n  \"/\",\n  /\\d/,\n  /\\d/,\n  \"/\",\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/\n];","import React from \"react\";\n\nimport MaskedInput from 'react-text-mask'\nimport { phoneMask, cepMask, dateMask } from '../../utils/masks.js'\n\nconst PhoneInput = ( props ) => (\n  <MaskedInput \n    { ...props } \n    type=\"text\"\n    mask={ phoneMask }\n  />\n);\n\nconst CepInput = ( props ) => (\n  <MaskedInput \n    { ...props } \n    type=\"text\"\n    mask={ cepMask }\n  />\n);\n\nconst DateInput = ( props ) => (\n  <MaskedInput \n    { ...props } \n    type=\"text\"\n    mask={ dateMask }\n  />\n);\n\nexport { PhoneInput, CepInput, DateInput };","import React, { Component } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { validateEmail, validatePhone, validateCep, validateDate } from '../../utils/validators.js'\nimport { PhoneInput, CepInput, DateInput } from '../../components/CustomInputs'\n\nclass PaginaUm extends Component {\n  render() {\n    return (\n      <div>\n        <Formik\n          initialValues={{\n            email: '',\n            phone: '',\n            cep: '',\n            date: '',\n          }}\n          onSubmit={ values => {\n            console.log( values );\n          }}\n        >\n          {({ errors, touched, dirty, isValidating, isSubmitting, isValid }) => (\n            <Form>\n              <Field \n                name=\"email\" \n                validate={ validateEmail } \n                className={ errors.email && touched.email ? \"text-input error\" : \"text-input\" }\n              />\n              {errors.email && touched.email && <div>{ errors.email }</div>}\n\n              <Field \n                name=\"phone\" \n                as={ PhoneInput }\n                validate={ validatePhone }\n                className={ errors.phone && touched.phone ? \"text-input error\" : \"text-input\" }\n                placeholder=\"Insira seu telefone\"\n              />\n              {errors.phone && touched.phone && <div>{ errors.phone }</div>}\n\n              <Field \n                name=\"cep\" \n                as={ CepInput }\n                validate={ validateCep }\n                className={ errors.cep && touched.cep ? \"text-input error\" : \"text-input\" }\n                placeholder=\"Insira seu CEP\"\n              />\n              {errors.cep && touched.cep && <div>{ errors.cep }</div>}\n\n              <Field \n                name=\"date\" \n                as={ DateInput }\n                validate={ validateDate }\n                className={ errors.date && touched.date ? \"text-input error\" : \"text-input\" }\n                placeholder=\"Insira a data\"\n              />\n              {errors.date && touched.date && <div>{ errors.date }</div>}\n\n              <button type=\"submit\" disabled={ !isValid || !dirty }>Submit</button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    );\n  }\n}\nexport default PaginaUm;","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div>NotFound</div>\n    );\n  }\n}\nexport default NotFound;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport PaginaUm from './pages/PaginaUm';\nimport NotFound from './pages/NotFound';\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact={ true } component={ Home } />\n        <Route path=\"/PaginaUm\" component={ PaginaUm } />\n        <Route path=\"*\" component={ NotFound } />\n      </Switch>\n    </BrowserRouter>    \n  );\n}\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Router from './Router'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}